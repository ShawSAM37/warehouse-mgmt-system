version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: wms-db
    environment:
      POSTGRES_USER: ${DB_USER:-wms}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-wms_secure_pass}
      POSTGRES_DB: ${DB_NAME:-wms_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - wms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-wms} -d ${DB_NAME:-wms_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  redis:
    image: redis:7-alpine
    container_name: wms-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_pass}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - wms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis_secure_pass}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wms-backend
    environment:
      DATABASE_URL: postgresql://${DB_USER:-wms}:${DB_PASSWORD:-wms_secure_pass}@db:5432/${DB_NAME:-wms_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_pass}@redis:6379/0
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      CORS_ALLOW_ORIGINS: ${CORS_ALLOW_ORIGINS:-http://localhost:8501,http://frontend:8501}
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      # ML-specific environment variables
      ML_MODEL_STORAGE_PATH: /app/models
      FORECAST_DEFAULT_HORIZON: ${FORECAST_DEFAULT_HORIZON:-30}
      ANOMALY_DETECTION_THRESHOLD: ${ANOMALY_DETECTION_THRESHOLD:-2.5}
      MODEL_RETRAIN_FREQUENCY: ${MODEL_RETRAIN_FREQUENCY:-weekly}
      ALERT_NOTIFICATION_WEBHOOK: ${ALERT_NOTIFICATION_WEBHOOK}
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - wms-network
    restart: unless-stopped
    volumes:
      - ml_models:/app/models
      - ml_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build:
      context: ./src/wms/dashboard
      dockerfile: Dockerfile.dashboard
    container_name: wms-frontend
    environment:
      API_BASE_URL: http://backend:8000
      API_URL: http://backend:8000
      STREAMLIT_THEME_BASE: light
      STREAMLIT_SERVER_ENABLE_CORS: false
      STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION: false
    ports:
      - "${DASHBOARD_PORT:-8501}:8501"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - wms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # NEW: ML Worker Service
  ml-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wms-ml-worker
    command: ["python", "-m", "src.wms.ml.scheduler"]
    environment:
      DATABASE_URL: postgresql://${DB_USER:-wms}:${DB_PASSWORD:-wms_secure_pass}@db:5432/${DB_NAME:-wms_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_pass}@redis:6379/0
      ML_WORKER_MODE: "true"
      MODEL_RETRAIN_SCHEDULE: ${MODEL_RETRAIN_SCHEDULE:-0 2 * * *}
      ML_MODEL_STORAGE_PATH: /app/models
      ML_LOG_STORAGE_PATH: /app/logs
      FORECAST_DEFAULT_HORIZON: ${FORECAST_DEFAULT_HORIZON:-30}
      ANOMALY_DETECTION_THRESHOLD: ${ANOMALY_DETECTION_THRESHOLD:-2.5}
      MODEL_RETRAIN_FREQUENCY: ${MODEL_RETRAIN_FREQUENCY:-weekly}
      ANOMALY_CHECK_FREQUENCY: ${ANOMALY_CHECK_FREQUENCY:-hourly}
      PERFORMANCE_MONITOR_FREQUENCY: ${PERFORMANCE_MONITOR_FREQUENCY:-daily}
      ALERT_NOTIFICATION_WEBHOOK: ${ALERT_NOTIFICATION_WEBHOOK}
      RMSE_DEGRADATION_THRESHOLD: ${RMSE_DEGRADATION_THRESHOLD:-1.5}
      ACCURACY_DEGRADATION_THRESHOLD: ${ACCURACY_DEGRADATION_THRESHOLD:-0.1}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - wms-network
    restart: unless-stopped
    volumes:
      - ml_models:/app/models
      - ml_logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # NEW: Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: wms-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - wms-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # NEW: Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: wms-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - wms-network
    restart: unless-stopped
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ml_models:
    driver: local
  ml_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  wms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
