version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: wms-db
    environment:
      POSTGRES_USER: ${DB_USER:-wms}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-wms_secure_pass}
      POSTGRES_DB: ${DB_NAME:-wms_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - wms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-wms} -d ${DB_NAME:-wms_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  redis:
    image: redis:7-alpine
    container_name: wms-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_pass}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - wms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis_secure_pass}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wms-backend
    environment:
      DATABASE_URL: postgresql://${DB_USER:-wms}:${DB_PASSWORD:-wms_secure_pass}@db:5432/${DB_NAME:-wms_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_pass}@redis:6379/0
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      CORS_ALLOW_ORIGINS: ${CORS_ALLOW_ORIGINS:-http://localhost:8501,http://frontend:8501}
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - wms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build:
      context: ./src/wms/dashboard
      dockerfile: Dockerfile.dashboard
    container_name: wms-frontend
    environment:
      API_BASE_URL: http://backend:8000
      API_URL: http://backend:8000
      STREAMLIT_THEME_BASE: light
      STREAMLIT_SERVER_ENABLE_CORS: false
      STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION: false
    ports:
      - "${DASHBOARD_PORT:-8501}:8501"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - wms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  wms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
